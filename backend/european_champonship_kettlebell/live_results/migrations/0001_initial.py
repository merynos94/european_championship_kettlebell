# Generated by Django 5.2 on 2025-04-25 11:05

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nazwa Kategorii')),
                ('disciplines', models.JSONField(default=list, verbose_name='Disciplines')),
            ],
            options={
                'verbose_name': 'Kategorie',
                'verbose_name_plural': 'Kategorie',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SportClub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nazwa Klubu')),
            ],
            options={
                'verbose_name': 'Klub',
                'verbose_name_plural': 'Kluby',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Imię')),
                ('surname', models.CharField(max_length=50, verbose_name='Nazwisko')),
                ('weight', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Waga (kg)')),
                ('categories', models.ManyToManyField(blank=True, related_name='players', to='live_results.category', verbose_name='Kategorie')),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='players', to='live_results.sportclub', verbose_name='Klub')),
            ],
            options={
                'verbose_name': 'Zawodnik',
                'verbose_name_plural': 'Zawodnicy',
                'ordering': ['surname', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PistolSquatResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_1', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba I')),
                ('result_2', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba II')),
                ('result_3', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba III')),
                ('position', models.PositiveIntegerField(blank=True, null=True, verbose_name='Pozycja w kategorii')),
                ('player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pistol_squat_result', to='live_results.player', verbose_name='Zawodnik')),
            ],
            options={
                'verbose_name': 'Wynik Pistol Squat',
                'verbose_name_plural': 'Wyniki Pistol Squat',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OneKettlebellPressResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_1', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba I')),
                ('result_2', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba II')),
                ('result_3', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba III')),
                ('position', models.PositiveIntegerField(blank=True, null=True, verbose_name='Pozycja w kategorii')),
                ('player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='one_kettlebell_press_result', to='live_results.player', verbose_name='Zawodnik')),
            ],
            options={
                'verbose_name': 'Wynik Kettlebell Press',
                'verbose_name_plural': 'Wyniki Kettlebell Press',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KBSquatResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_1', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba I')),
                ('result_2', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba II')),
                ('result_3', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba III')),
                ('position', models.PositiveIntegerField(blank=True, null=True, verbose_name='Pozycja w kategorii')),
                ('player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='kb_squat_one_result', to='live_results.player', verbose_name='Zawodnik')),
            ],
            options={
                'verbose_name': 'Wynik Kettlebell Squat',
                'verbose_name_plural': 'Wyniki Kettlebell Squat',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SeeSawPressResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_left_1', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba I L')),
                ('result_right_1', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba I R')),
                ('result_left_2', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba II L')),
                ('result_right_2', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba II R')),
                ('result_left_3', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba III L')),
                ('result_right_3', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba III R')),
                ('position', models.IntegerField(blank=True, null=True, verbose_name='Pozycja w kategorii')),
                ('player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='see_saw_press_result', to='live_results.player', verbose_name='Zawodnik')),
            ],
            options={
                'verbose_name': 'Wynik See Saw Press',
                'verbose_name_plural': 'Wyniki See Saw Press',
                'ordering': ['player__categories', '-position'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SnatchResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kettlebell_weight', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Waga Kettlebell (kg)')),
                ('repetitions', models.IntegerField(blank=True, default=0, null=True, verbose_name='Ilość Powtórzeń')),
                ('position', models.IntegerField(blank=True, null=True, verbose_name='Pozycja w kategorii')),
                ('player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='snatch_result', to='live_results.player', verbose_name='Zawodnik')),
            ],
            options={
                'verbose_name': 'Wynik Snatch',
                'verbose_name_plural': 'Wyniki Snatch',
                'ordering': ['player__categories', '-position'],
            },
        ),
        migrations.CreateModel(
            name='TGUResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_1', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba I')),
                ('result_2', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba II')),
                ('result_3', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba III')),
                ('position', models.PositiveIntegerField(blank=True, null=True, verbose_name='Pozycja w kategorii')),
                ('player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tgu_result', to='live_results.player', verbose_name='Zawodnik')),
            ],
            options={
                'verbose_name': 'Wynik Turkish Get-Up',
                'verbose_name_plural': 'Wyniki Turkish Get-Up',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TwoKettlebellPressResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_1', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba I')),
                ('result_2', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba II')),
                ('result_3', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Próba III')),
                ('position', models.PositiveIntegerField(blank=True, null=True, verbose_name='Pozycja w kategorii')),
                ('player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='two_kettlebell_press_one_result', to='live_results.player', verbose_name='Zawodnik')),
            ],
            options={
                'verbose_name': 'Wynik Two Kettlebell Press',
                'verbose_name_plural': 'Wyniki Two Kettlebell Press',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CategoryOverallResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snatch_points', models.FloatField(blank=True, null=True, verbose_name='Punkty Snatch')),
                ('tgu_points', models.FloatField(blank=True, null=True, verbose_name='Punkty TGU')),
                ('kb_squat_points', models.FloatField(blank=True, null=True, verbose_name='Punkty KB Squat')),
                ('one_kb_press_points', models.FloatField(blank=True, null=True, verbose_name='Punkty OKBP')),
                ('two_kb_press_points', models.FloatField(blank=True, null=True, verbose_name='Punkty TKBP')),
                ('tiebreak_points', models.FloatField(default=0.0, verbose_name='Punkty Tiebreak')),
                ('total_points', models.FloatField(blank=True, db_index=True, null=True, verbose_name='Suma Punktów')),
                ('final_position', models.PositiveIntegerField(blank=True, db_index=True, null=True, verbose_name='Miejsce Końcowe')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overall_results', to='live_results.category', verbose_name='Kategoria')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_results', to='live_results.player', verbose_name='Zawodnik')),
            ],
            options={
                'verbose_name': 'Wynik Ogólny Kategorii',
                'verbose_name_plural': 'Wyniki Ogólne Kategorii',
                'ordering': ['category', 'final_position', 'total_points'],
                'unique_together': {('player', 'category')},
            },
        ),
        migrations.CreateModel(
            name='PlayerCategoryTiebreak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tiebreaks_applied', to='live_results.category', verbose_name='Kategoria')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tiebreaks_applied', to='live_results.player', verbose_name='Zawodnik')),
            ],
            options={
                'verbose_name': 'Zastosowany Tiebreak (Zawodnik-Kategoria)',
                'verbose_name_plural': 'Zastosowane Tiebreaki (Zawodnik-Kategoria)',
                'ordering': ['player__surname', 'player__name', 'category__name'],
                'unique_together': {('player', 'category')},
            },
        ),
    ]

"""Fisrt migration for live_results app"""
# Generated by Django 5.1.7 on 2025-03-30 09:52

from decimal import Decimal

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    """
    A migration to create models for the live_results app.

    This migration creates the following models:
    - Athlete: Represents an athlete participating in the competition.
    - Category: Represents a category of competition (e.g., Men's Professional, Women's Amateur).
    - Club: Represents a sports club.
    - AthleteCategory: Represents an athlete's enrollment in a specific category.
    - ExerciseType: Represents a type of exercise (e.g., Long Cycle, Snatch).
    - Exercise: Represents a specific instance of an exercise performed by an athlete in a category.
    """

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Athlete",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("first_name", models.CharField(max_length=100, verbose_name="Imię")),
                ("last_name", models.CharField(max_length=100, verbose_name="Nazwisko")),
                (
                    "body_weight",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                        verbose_name="Waga ciała [kg]",
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True, verbose_name="Uwagi")),
            ],
            options={
                "verbose_name": "Zawodnik",
                "verbose_name_plural": "Zawodnicy",
                "ordering": ["last_name", "first_name"],
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="Nazwa kategorii")),
                ("description", models.TextField(blank=True, null=True, verbose_name="Opis")),
            ],
            options={
                "verbose_name": "Kategoria",
                "verbose_name_plural": "Kategorie",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Club",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=150, verbose_name="Nazwa klubu")),
                ("address", models.TextField(blank=True, null=True, verbose_name="Adres")),
                ("contact", models.CharField(blank=True, max_length=200, null=True, verbose_name="Kontakt")),
            ],
            options={
                "verbose_name": "Klub",
                "verbose_name_plural": "Kluby",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="AthleteCategory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("points", models.DecimalField(decimal_places=1, default=0, max_digits=5, verbose_name="Punkty")),
                ("tiebreaker", models.BooleanField(default=False, verbose_name="Dogrywka (-0.5 pkt)")),
                ("place", models.PositiveSmallIntegerField(blank=True, null=True, verbose_name="Miejsce")),
                (
                    "athlete",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="category_enrollments",
                        to="live_results.athlete",
                        verbose_name="Zawodnik",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="athlete_enrollments",
                        to="live_results.category",
                        verbose_name="Kategoria",
                    ),
                ),
            ],
            options={
                "verbose_name": "Zawodnik w kategorii",
                "verbose_name_plural": "Zawodnicy w kategoriach",
                "unique_together": {("athlete", "category")},
            },
        ),
        migrations.AddField(
            model_name="athlete",
            name="categories",
            field=models.ManyToManyField(
                related_name="athletes",
                through="live_results.AthleteCategory",
                to="live_results.category",
                verbose_name="Kategorie",
            ),
        ),
        migrations.AddField(
            model_name="athlete",
            name="club",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="athletes",
                to="live_results.club",
                verbose_name="Klub",
            ),
        ),
        migrations.CreateModel(
            name="ExerciseType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="Nazwa ćwiczenia")),
                ("description", models.TextField(blank=True, null=True, verbose_name="Opis")),
                (
                    "calculation_method",
                    models.CharField(
                        choices=[
                            ("weight_x_reps", "Waga × Powtórzenia"),
                            ("weight_to_body", "Stosunek do masy ciała"),
                            ("best_attempt", "Najlepsza próba"),
                            ("custom", "Niestandardowa metoda"),
                        ],
                        default="weight_x_reps",
                        max_length=20,
                        verbose_name="Metoda obliczania wyniku",
                    ),
                ),
                ("attempts_count", models.PositiveSmallIntegerField(default=1, verbose_name="Liczba prób")),
                ("is_active", models.BooleanField(default=True, verbose_name="Aktywne")),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Kategorie, w których to ćwiczenie jest używane",
                        related_name="exercise_types",
                        to="live_results.category",
                        verbose_name="Kategorie",
                    ),
                ),
            ],
            options={
                "verbose_name": "Typ ćwiczenia",
                "verbose_name_plural": "Typy ćwiczeń",
            },
        ),
        migrations.CreateModel(
            name="Exercise",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "kettlebell_weight",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                        verbose_name="Waga odważnika [kg]",
                    ),
                ),
                ("repetitions", models.PositiveIntegerField(default=0, verbose_name="Liczba powtórzeń")),
                (
                    "attempt1_weight",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                        verbose_name="Próba 1 [kg]",
                    ),
                ),
                (
                    "attempt2_weight",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                        verbose_name="Próba 2 [kg]",
                    ),
                ),
                (
                    "attempt3_weight",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                        verbose_name="Próba 3 [kg]",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "athlete",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exercises",
                        to="live_results.athlete",
                        verbose_name="Zawodnik",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="category_exercises",
                        to="live_results.category",
                        verbose_name="Kategoria",
                    ),
                ),
                (
                    "exercise_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exercises",
                        to="live_results.exercisetype",
                        verbose_name="Typ ćwiczenia",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ćwiczenie",
                "verbose_name_plural": "Ćwiczenia",
                "unique_together": {("athlete", "exercise_type", "category")},
            },
        ),
    ]
